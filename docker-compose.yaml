services:
  greeter:
    build: services/greeter
    container_name: greeter
    ports:
      - "5006:5000" # Expose the service on port 5006 since port 5000 is already in use by Mac's default Control Center
    networks:
      - backend
    depends_on:
      - name
      - greeting
    environment:
      - NAME_SERVICE_URL=http://name:5001/name
      - GREETING_SERVICE_URL=http://greeting:5002/greeting

  name:
    build: services/name
    container_name: name
    ports:
      - "5001:5001"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://name:5001/health"]
      interval: 5s
      timeout: 3s
      retries: 10

  greeting:
    build: services/greeting
    container_name: greeting
    ports:
      - "5002:5002"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://greeting:5002/health"]
      interval: 5s
      timeout: 3s
      retries: 10

  fareweller:
    build: services/fareweller
    container_name: fareweller
    ports:
      - "5003:5003"
    networks:
      - backend
    depends_on:
      - name
      - farewell

  farewell:
    build: services/farewell
    container_name: farewell
    ports:
      - "5004:5004"
    networks:
      - backend

  sqs-processor:
    build: services/sqs-processor
    container_name: sqs-processor
    environment:
      - AWS_REGION=us-east-1
      - SLACK_WEBHOOK_URL=""
      - SQS_QUEUE_URL=http://sqs.us-east-1.localhost.localstack.cloud:4566/000000000000/queue-a
      - LOCALSTACK_ENDPOINT=https://localhost.localstack.cloud:4566
    ports:
      - "5005:5005"
    networks:
      - backend

  friends:
    build: services/friends
    container_name: friends
    environment:
      - FRIEND=chandler
    ports:
      - "5007:5007"
    networks:
      - backend
    depends_on:
      - name
      - greeting

  greeter-saver:
    build: services/greeter-saver
    container_name: greeter-saver
    ports:
      - "5008:5008"
    networks:
      - backend
    depends_on:
      name: {condition: service_healthy}
      greeting: {condition: service_healthy}
      database: {condition: service_healthy}
    environment:
      - NAME_SERVICE_URL=http://name:5001/name
      - GREETING_SERVICE_URL=http://greeting:5002/greeting
      - DATABASE_URL=postgresql://user:password@database:5432/mydatabase

  database:
    image: postgres:13-alpine
    container_name: database
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=mydatabase
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydatabase"]
      interval: 5s
      timeout: 3s
      retries: 10


volumes:
  pgdata:

networks:
  backend:
